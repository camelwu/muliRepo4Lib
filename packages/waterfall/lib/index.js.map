{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["export interface WaterfallParams {\n  /**\n   * 此参数主要定义每列的宽度\n   */\n  columns: Array<{ width: number; height: number }>;\n}\n\nclass Waterfall {\n  columns!: Array<Record<string, any>>;\n  formatedData!: Array<{ width: number; height: number }>;\n  constructor(options: WaterfallParams) {\n    this.initWaterfall(options);\n  }\n  private initWaterfall(options: WaterfallParams) {\n    this.columns = options.columns;\n    this.formatedData = [];\n    for (const column of options.columns) {\n      this.formatedData.push({\n        width: column.width,\n        height: 0\n      });\n    }\n  }\n  /**\n   * 向瀑布流中补充数据\n   * @param {Boolean} extraVal 瀑布流的卡片中是否有出图片之外的内容\n   * @param {Array<resource>}  resources\n   */\n  async addResources(\n    resources: Array<{\n      width: number;\n      height: number;\n      cardHeight?: number;\n      computedHeight?: number;\n    }>,\n    extraVal: number\n  ) {\n    const newResourcesArray: Array<Array<any>> = [];\n    this.columns.map(() => {\n      newResourcesArray.push([]);\n    });\n    for (const resource of resources) {\n      // 宽高比使用服务端返回的宽高计算，没有的话为1:1\n      const width = Number(resource.width) || 100;\n      const height = Number(resource.height) || 100;\n      // 获取最短列的索引\n      const index = this.getShortestColumn();\n      // 卡片宽度\n      const imageWidth = this.formatedData[index].width;\n      // 附加的卡片高度自行配置\n      const extraHeight = extraVal ? extraVal : 0;\n      // 获取卡片高度\n      const cardHeight = imageWidth / (width / height) + extraHeight;\n      // 当前列总高度\n      this.formatedData[index].height += cardHeight;\n      // 返回卡片高度\n      resource.cardHeight = cardHeight;\n      // 返回图片高度\n      resource.computedHeight = cardHeight - extraVal;\n      // 返回当前列的数组\n      newResourcesArray[index].push(resource);\n    }\n    return newResourcesArray;\n  }\n  /**\n   * 最重要的地方\n   *获取当前数据中填充最短的列\n   * 返回最短列的索引\n   */\n  private getShortestColumn() {\n    let minHeight = Infinity;\n    let minHeightColumnIndex = 0;\n    for (let index = this.formatedData.length - 1; index > -1; index--) {\n      //从后往前遍历，防止每列的高度相同的情况\n      const height = this.formatedData[index].height;\n      if (height <= minHeight) {\n        minHeightColumnIndex = index;\n        minHeight = height;\n      }\n    }\n    return minHeightColumnIndex;\n  }\n}\n\nexport default Waterfall;\n"],"names":[],"mappings":";;;;AAOA,MAAM,SAAS;IAGb,YAAY,OAAwB;QAClC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;KAC7B;IACO,aAAa,CAAC,OAAwB;QAC5C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,KAAK,MAAM,MAAM,IAAI,OAAO,CAAC,OAAO,EAAE;YACpC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;gBACrB,KAAK,EAAE,MAAM,CAAC,KAAK;gBACnB,MAAM,EAAE,CAAC;aACV,CAAC,CAAC;SACJ;KACF;;;;;;IAMD,MAAM,YAAY,CAChB,SAKE,EACF,QAAgB;QAEhB,MAAM,iBAAiB,GAAsB,EAAE,CAAC;QAChD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;YACf,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAC5B,CAAC,CAAC;QACH,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;;YAEhC,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC;YAC5C,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC;;YAE9C,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;;YAEvC,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC;;YAElD,MAAM,WAAW,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,CAAC;;YAE5C,MAAM,UAAU,GAAG,UAAU,IAAI,KAAK,GAAG,MAAM,CAAC,GAAG,WAAW,CAAC;;YAE/D,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,MAAM,IAAI,UAAU,CAAC;;YAE9C,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAC;;YAEjC,QAAQ,CAAC,cAAc,GAAG,UAAU,GAAG,QAAQ,CAAC;;YAEhD,iBAAiB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACzC;QACD,OAAO,iBAAiB,CAAC;KAC1B;;;;;;IAMO,iBAAiB;QACvB,IAAI,SAAS,GAAG,QAAQ,CAAC;QACzB,IAAI,oBAAoB,GAAG,CAAC,CAAC;QAC7B,KAAK,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;;YAElE,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC;YAC/C,IAAI,MAAM,IAAI,SAAS,EAAE;gBACvB,oBAAoB,GAAG,KAAK,CAAC;gBAC7B,SAAS,GAAG,MAAM,CAAC;aACpB;SACF;QACD,OAAO,oBAAoB,CAAC;KAC7B;;;;;"}